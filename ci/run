#!/usr/bin/env bash
#
# Script run by buildkite that builds and tests the project.
#
# See
# * https://buildkite.com/docs/pipelines/managing-log-output
# * https://buildkite.com/docs/pipelines/writing-build-scripts

set -euo pipefail

if [[ ${CI_VERBOSE:-} =~ ^1|true$ ]]; then
  set -x
fi

TIMEFORMAT='elapsed time: %R (user: %U, system: %S)'

declare -r target_cache="/cache/target"

export CARGO_HOME=/cache/cargo

export RUSTC_WRAPPER=sccache
export SCCACHE_DIR=/cache/sccache
# Most of the caching is done through caching ./target
export SCCACHE_CACHE_SIZE="1G"

echo "--- Prepare cache"
free_cache_space_kb=$(df --output=avail /cache | sed -n 2p)
min_free_cache_kb=$(( 800 * 1024 ))
echo "$(( free_cache_space_kb / 1024 )) MiB free space on /cache"
if [[ $free_cache_space_kb -le $min_free_cache_kb ]]; then
  echo "Reseting cache with rm -rf /cache/*"
  du -sh /cache/*
  rm -rf /cache/*
fi
mkdir -p "$target_cache"
ln -s "$target_cache" ./target

echo "--- scripts/check-license-headers"
time ./scripts/check-license-headers

echo "--- cargo fmt"
time cargo fmt --all -- --check

# parse runtime version
runtime_version="$(awk '$1 == "version" {print $3; exit}' runtime/Cargo.toml | tr -d \")"
spec_version="$(echo "$runtime_version" | awk -F . '{print $2}')"
impl_version="$(echo "$runtime_version" | awk -F . '{print $3}')"
latest_runtime_name="v${spec_version}_${impl_version}.wasm"
latest_spec_latest_impl_name="dev_v${spec_version}_latest.json"
latest_spec_first_impl_name="dev_v${spec_version}_0.json"

echo "--- rebuilding runtime cache"
scripts/rebuild-runtime-cache

export RUSTFLAGS="-D warnings"

echo "--- cargo clippy"
cargo clippy --workspace --all-targets --release -- -D clippy::all
echo "--- cargo clippy (for wasm32 target)"
cargo clippy \
  --manifest-path runtime/Cargo.toml \
  --no-default-features \
  --features no-std \
  --target wasm32-unknown-unknown \
  -- \
  -D clippy::all

echo "--- cargo doc"
RUSTDOCFLAGS="-D intra-doc-link-resolution-failure" \
  cargo doc --workspace --release --no-deps --document-private-items

echo "--- scripts/build-release"
./scripts/build-release

echo "--- run tests"
# The home directory is not writable on CI
export XDG_DATA_HOME=/tmp/xdg-data-home
export XDG_CONFIG_HOME=/tmp/xdg-config-home
scripts/run-tests-all-runtimes

echo "--- Copy artifacts"
mkdir artifacts
tar -cpzf artifacts/radicle-registry-cli.tar.gz -C target/release radicle-registry-cli
tar -cpzf artifacts/radicle-registry-node.tar.gz -C target/release radicle-registry-node
cp -a target/release/radicle-registry-node ci/node-image
cp runtime-cache/latest.wasm artifacts/runtime.wasm


if [[ -n "${BUILDKITE_TAG:-}" ]]
then
    declare -r artifact_scope="${BUILDKITE_TAG}"
elif [[ "${BUILDKITE_BRANCH}" == "master" ]]
then
    declare -r artifact_scope="master/${BUILDKITE_COMMIT}"
else
    declare -r artifact_scope="$BUILDKITE_JOB_ID"
fi
declare -r artifact_prefix="https://builds.radicle.xyz/radicle-registry/${artifact_scope}"

{
  echo "Artifacts"
  echo "* \`gcr.io/opensourcecoin/radicle-registry/node:${BUILDKITE_COMMIT}\`"
  for path in artifacts/*; do
    url="${artifact_prefix}/${path}"
    name=$(cut -d / -f 2- <<< "${path}")
    echo "* [\`${name}\`](${url})"
  done
} | buildkite-agent annotate --context node-binary --style success

if [[ "${BUILDKITE_BRANCH}" == "master" ]]
then
  echo "--- Upload runtime and specs"

  source .secrets
  gcloud auth activate-service-account --key-file=- <<< "$RUNTIME_STORAGE_GCP_CREDENTIALS"

  STORAGE_PREFIX='gs://radicle-registry-runtime/'

  echo "uploading runtime"
  # Does not overwrite if exists
  gsutil cp -n "runtime-cache/latest.wasm" "$STORAGE_PREFIX$latest_runtime_name"

  echo "uploading latest impl spec"
  # Overwrites to account for non-runtime spec changes
  gsutil cp "runtime-cache/$latest_spec_latest_impl_name" "$STORAGE_PREFIX$latest_spec_latest_impl_name"

  echo "copying latest impl spec to first impl spec"
  # Does not overwrite if exists
  gsutil cp -n "$STORAGE_PREFIX$latest_spec_latest_impl_name" "$STORAGE_PREFIX$latest_spec_first_impl_name"
fi

echo "--- Cleanup cache"

# Remove all executables that need to be rebuild.
find ./target -maxdepth 2 -executable -type f -exec rm {} \;

# Remove incremental artifacts for local packages. These artifacts are
# usesless for subsequent builds because incremental builds are based
# on timestamps and we always do a fresh checkout of the repository.
find ./target -name incremental -type d -exec rm -r {} \;

# Remove artifats from local code
rm -r target/release/deps/radicle* target/release/build/radicle*
find ./target -name 'radicle*' -exec rm -r {} \;

echo "Size of $target_cache is $(du -sh "$target_cache" | cut -f 1)"
