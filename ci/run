#!/usr/bin/env bash
#
# Script run by buildkite that builds and tests the project.
#
# See
# * https://buildkite.com/docs/pipelines/managing-log-output
# * https://buildkite.com/docs/pipelines/writing-build-scripts

set -euo pipefail

if [[ ${CI_VERBOSE:-} =~ ^1|true$ ]]; then
  set -x
fi

TIMEFORMAT='elapsed time: %R (user: %U, system: %S)'

declare -r target_cache="/cache/target"

# Incremental builds use timestamps of local code. Since we always
# check it out fresh we can never use incremental builds.
export CARGO_BUILD_INCREMENTAL=false
# Most of the caching is done through caching ./target
export SCCACHE_CACHE_SIZE="1G"

echo "--- Prepare cache"
free_cache_space_kb=$(df --output=avail /cache | sed -n 2p)
min_free_cache_kb=$(( 800 * 1024 ))
echo "$(( free_cache_space_kb / 1024 )) MiB free space on /cache"
if [[ $free_cache_space_kb -le $min_free_cache_kb ]]; then
  echo "Reseting cache with rm -rf /cache/*"
  du -sh /cache/*
  rm -rf /cache/*
fi
mkdir -p "$target_cache"
ln -s "$target_cache" ./target

echo "--- scripts/check-license-headers"
time ./scripts/check-license-headers

echo "--- cargo fmt"
time cargo fmt --all -- --check

echo "--- cargo build"
export BUILD_DUMMY_WASM_BINARY=0
export RUSTFLAGS="-D warnings"
cargo clippy --workspace --all-targets --release -- -D clippy::all
cargo build --workspace --all-targets --release

echo "--- cargo test"
echo "Starting radicle-registry-node"
RUST_LOG=error ./target/release/radicle-registry-node \
  --dev \
  --base-path /tmp/radicle-registry \
  &
registry_node_pid=$!
# We build tests in release mode so that we can reuse the artifacts
# from 'cargo build'
cargo test --workspace --release --color=always
kill "$registry_node_pid"

echo "--- Copy artifacts"
mkdir artifacts
cp -a target/release/radicle-registry-node artifacts
cp -a target/release/radicle-registry-node ci/node-image

echo "--- Cleanup cache"
# Remove all executables that need to be rebuild.
find ./target -maxdepth 2 -executable -type f -exec rm {} \;
# Remove artifats from local code
rm -r target/release/deps/radicle* target/release/build/radicle*
echo "Size of $target_cache is $(du -sh "$target_cache" | cut -f 1)"

# Upload the node binary to bintray using the commit hash as the version.
function upload_to_bintray () {
  local -r api_url="https://bintray.com/api/v1"
  local -r subject="oscoin"
  local -r repo="radicle-registry-files"
  local -r package="radicle-registry-node"
  local -r version="git-$BUILDKITE_COMMIT"
  local -r target_triple="x86_64-linux-gnu"
  local -r remote_file="$version/$target_triple/radicle-registry-node"
  local -r local_file="./artifacts/radicle-registry-node"

  local file_checksum
  file_checksum="$(sha256sum "$local_file" | cut -f1 -d ' ')"

  curl \
    --fail --show-error \
    -X PUT \
    --basic --user "$BINTRAY_API_KEY" \
    -H "X-Bintray-Package: $package" \
    -H "X-Bintray-Version: $version" \
    -H "X-Bintray-Override: 1" \
    -H "X-Bintray-Publish: 1" \
    -H "X-Checksum-Sha2: $file_checksum" \
    "$api_url/content/$subject/$repo/$remote_file" \
    --data-binary @$local_file
  # Response from curl does not end with new line
  echo

  local -r download_path="https://dl.bintray.com/$subject/$repo/$remote_file"
  echo "Node binary available from $download_path"
}

if [[ -n "${BINTRAY_API_KEY:-}" ]]; then
  echo "--- Upload bintray artifacts"
  upload_to_bintray
fi
