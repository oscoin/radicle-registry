#!/usr/bin/env bash
#
# Script run by buildkite that builds and tests the project.
#
# See
# * https://buildkite.com/docs/pipelines/managing-log-output
# * https://buildkite.com/docs/pipelines/writing-build-scripts

set -euo pipefail

if [[ ${CI_VERBOSE:-} =~ ^1|true$ ]]; then
  set -x
fi

TIMEFORMAT='elapsed time: %R (user: %U, system: %S)'

echo "--- Load cache"
declare -i cache_version=14
target_cache=/cache/target-v${cache_version}
target_cache_key_file="$target_cache/_key"
cache_key="$(sha256sum Cargo.lock | cut -f 1 -d ' ')"

if [[ $BUILDKITE_BRANCH = "master" ]]; then
  declare -i old_cache_version="$cache_version - 1"
  old_target_cache=/cache/target-v${old_cache_version}
  if [[ -d "$old_target_cache" ]]; then
    rm -rf "$old_target_cache"
    echo "Deleted old cache $old_target_cache"
  fi
fi

if [[ -d "$target_cache" ]]; then
  if [[ -f "$target_cache_key_file" ]]; then
    if [[ "$(cat $target_cache_key_file)" != "$cache_key" ]]; then
      echo "Error: Target cache key does not match project cache key."
      echo "Please update the cache version in ./ci/run"
      exit 1
    fi
  fi
  time cp -aT "$target_cache" target
  echo "Size of $target_cache is $(du -sh "$target_cache" | cut -f 1)"
else
  echo "Cache $target_cache not available"
fi

echo "--- scripts/check-license-headers"
time ./scripts/check-license-headers

echo "--- cargo fmt"
time cargo fmt --all -- --check

echo "--- cargo build"
export BUILD_DUMMY_WASM_BINARY=0
export RUSTFLAGS="-D warnings"
cargo build --all --all-targets --release

echo "--- cargo test"
echo "Starting radicle-registry-node"
RUST_LOG=error ./target/release/radicle-registry-node \
  --dev \
  --base-path /tmp/radicle-registry \
  &
registry_node_pid=$!
# We build tests in release mode so that we can reuse the artifacts
# from 'cargo build'
cargo test --all --release --color=always
kill "$registry_node_pid"

echo "--- Save cache"
# Remove large build artifacts that are faster to build than cache.
# The `target/release/radicle-registry-node` file is kept because they
# are uploaded to Buildkite (i.e. the node).
# The folder and its contents are deleted at a later step in the build.
mkdir artifacts
cp -a target/release/radicle-registry-node artifacts
cp -a target/release/radicle-registry-node ci/node-image
rm -rf \
  target/*/radicle-registry-node* \
  target/*/incremental \
  target/*/wbuild/target/*/incremental \
  target/*/wbuild-runner/target/*/incremental

if [[ -d "$target_cache" && "$BUILDKITE_BRANCH" == "master" ]]; then
  echo "Cache $target_cache does already exist"
else
  time cp -aTu target "$target_cache"
  echo "$cache_key" > "$target_cache_key_file"
  echo "Size of $target_cache is $(du -sh "$target_cache" | cut -f 1)"
fi

# Upload the node binary to bintray using the commit hash as the version.
function upload_to_bintray () {
  local -r api_url="https://bintray.com/api/v1"
  local -r subject="oscoin"
  local -r repo="radicle-registry-files"
  local -r package="radicle-registy-node"
  local -r version="git-$BUILDKITE_COMMIT"
  local -r target_triple="x86_64-linux-gnu"
  local -r remote_file="$version/$target_triple/radicle-registry-node"
  local -r local_file="./artifacts/radicle-registry-node"
  local -r user="monadic-ci"

  local file_checksum
  file_checksum="$(sha256sum "$local_file" | cut -f1 -d ' ')"

  curl \
    --show-error \
    -X PUT \
    --basic --user "$user:$BINTRAY_API_KEY" \
    -H "X-Bintray-Package: $package" \
    -H "X-Bintray-Version: $version" \
    -H "X-Bintray-Publish: 1" \
    -H "X-Checksum-Sha2: $file_checksum" \
    "$api_url/content/$subject/$repo/$remote_file?publish=1" \
    --data-binary @$local_file
  # Response from curl does not end with new line
  echo

  local -r download_path="https://dl.bintray.com/$subject/$repo/$remote_file"
  echo "Node binary available from $download_path"
}

if [[ -n "${BINTRAY_API_KEY:-}" ]]; then
  echo "--- Upload bintray artifacts"
  upload_to_bintray
fi
