#!/usr/bin/env bash
#
# Script run by buildkite that builds and tests the project.
#
# See
# * https://buildkite.com/docs/pipelines/managing-log-output
# * https://buildkite.com/docs/pipelines/writing-build-scripts

set -euo pipefail

if [[ ${CI_VERBOSE:-} =~ ^1|true$ ]]; then
  set -x
fi

TIMEFORMAT='elapsed time: %R (user: %U, system: %S)'

declare -r target_cache="/cache/target"

export CARGO_HOME=/cache/cargo

export RUSTC_WRAPPER=sccache
export SCCACHE_DIR=/cache/sccache
# Most of the caching is done through caching ./target
export SCCACHE_CACHE_SIZE="1G"

echo "--- Prepare cache"
free_cache_space_kb=$(df --output=avail /cache | sed -n 2p)
min_free_cache_kb=$(( 800 * 1024 ))
echo "$(( free_cache_space_kb / 1024 )) MiB free space on /cache"
if [[ $free_cache_space_kb -le $min_free_cache_kb ]]; then
  echo "Reseting cache with rm -rf /cache/*"
  du -sh /cache/*
  rm -rf /cache/*
fi
mkdir -p "$target_cache"
ln -s "$target_cache" ./target

echo "--- scripts/check-license-headers"
time ./scripts/check-license-headers

echo "--- cargo fmt"
time cargo fmt --all -- --check

export RUSTFLAGS="-D warnings"

echo "--- cargo clippy"
cargo clippy --workspace --all-targets --release -- -D clippy::all
echo "--- cargo clippy (for wasm32 target)"
cargo clippy \
  --manifest-path runtime/Cargo.toml \
  --no-default-features \
  --features no-std \
  --target wasm32-unknown-unknown \
  -- \
  -D clippy::all

echo "--- cargo doc"
RUSTDOCFLAGS="-D intra-doc-link-resolution-failure" \
  cargo doc --workspace --release --no-deps --document-private-items

echo "--- scripts/build-release"
./scripts/build-release

echo "--- cargo test"
echo "Starting radicle-registry-node"
RUST_LOG=error ./target/release/radicle-registry-node \
  --chain dev \
  --mine 5HYpUCg4KKiwpih63PUHmGeNrK2XeTxKR83yNKbZeTsvSKNq \
  --data-path /tmp/radicle-registry \
  &
registry_node_pid=$!

# We build tests in release mode so that we can reuse the artifacts
# from 'cargo build'
cargo test --workspace --release --color=always
kill "$registry_node_pid"

echo "--- Copy artifacts"
mkdir artifacts
tar -cpzf artifacts/radicle-registry-cli.tar.gz -C target/release radicle-registry-cli
tar -cpzf artifacts/radicle-registry-node.tar.gz -C target/release radicle-registry-node
cp -a target/release/radicle-registry-node ci/node-image

echo "--- Cleanup cache"

# Remove all executables that need to be rebuild.
find ./target -maxdepth 2 -executable -type f -exec rm {} \;

# Remove incremental artifacts for local packages. These artifacts are
# usesless for subsequent builds because incremental builds are based
# on timestamps and we always do a fresh checkout of the repository.
find ./target -name incremental -type d -exec rm -r {} \;

# Remove artifats from local code
rm -r target/release/deps/radicle* target/release/build/radicle*
find ./target -name 'radicle*' -exec rm -r {} \;

echo "Size of $target_cache is $(du -sh "$target_cache" | cut -f 1)"
